#include <iostream>
#include<stdio.h> 
#include<stdlib.h> 

using namespace std;

struct Node {
    int data;
    Node *right, *left, *parent;

}; 

class BSTIterative{
    public: Node *root;

    public:
        void printTree( Node *pNode) {

            //int i;
            if(pNode==NULL) {
                return;
            }
            //cout<<pNode->data<<" ";
            printTree(pNode->left);
            cout<<pNode->data<<" ";
            printTree(pNode->right);
           
        }
        void insertIter(int pData) {
            //cout<<"a 00000"<<endl;
            Node *tempNode, *parentNode;
            char leftOrRight;
            
	        Node *newNode=new Node;
	        newNode->data=pData;

            if (root== NULL)
                //root node
                root=newNode;
            else {
                //not root node, find position to insert
                tempNode = root;
                while (tempNode!= NULL) {
                    
                    parentNode = tempNode;
                    //cout<<"pData tempNode parentNode: "<<pData<<" "<<tempNode->data<<" "<<parentNode->data<<endl;
                    if (pData < tempNode->data) {
                        tempNode = tempNode->left;
                        leftOrRight='L';
                    }
                    else {
                        tempNode = tempNode->right;
                        leftOrRight='R';
                    }
                }
                //cout<<"********* out of loop: LR: "<<leftOrRight<<endl;
                if (leftOrRight=='L')
                    parentNode->left = newNode;
                else                
                    parentNode->right = newNode;
            }
            

        }
        
        void deleteIter(int pData) {
            Node *tempNode, *parentNode;
            char leftOrRight;
            bool found=false;
            
            //cout<<"a 00000"<<endl;
            if (root == NULL) {
                return;
            }
            else {
                
                tempNode = root;
                parentNode=NULL;
                while (tempNode!= NULL) {
                    
                    
                    //cout<<"pData tempNode parentNode: "<<pData<<" "<<tempNode->data<<" "<<parentNode->data<<endl;
                    if (pData < tempNode->data) {
                        parentNode = tempNode;
                        tempNode = tempNode->left;
                        leftOrRight='L';
                    }
                    else if (pData > tempNode->data) {
                        parentNode = tempNode;
                        tempNode = tempNode->right;
                        leftOrRight='R';
                    }
                    else {
                        //data found in tempNode
                        found=true;
                        break;
                    }
                }
                if (found) {
                    //handle 3 scenarios
                    //1 - node has only left
                        //just remove the node
                    if (tempNode->left == NULL) {
                        if (leftOrRight == 'L')
                            parentNode->left = tempNode->right;
                        if (leftOrRight == 'R')
                            parentNode->right = tempNode->right;
                        free(tempNode);
                        return;
                    }
                    //2 - node has only right
                    else if (tempNode->right == NULL) {
                        if (leftOrRight == 'L')
                            parentNode->left = tempNode->left;
                        if (leftOrRight == 'R')
                            parentNode->right = tempNode->left;
                        free(tempNode);
                        return;
                    }
                    //3 - node has both left and right
                        //find min node to the right of the node
                        //copy the min node to the node to be deleted
                        //delete the min node
                    Node* current = tempNode->right; 
                    Node* currentsParent = tempNode; 
                
                    /* loop down to find the leftmost leaf */
                    while (current && current->left != NULL) { 
                        currentsParent = current;
                        current = current->left;
                    
                    }
                    //cout<<endl<<"pNode's rights left: "<<current->data<<endl;
                    //cout<<"pNode's rights left parent: "<<currentsParent->data<<endl;
                    currentsParent->left = current->right; 
                    tempNode->data = current->data;

                    free(current);
                    return;
                }
                

            }
           
        }
        int findNextIter(int pData) {
            Node *tempNode, *parentNode;
            char leftOrRight;
            bool found=false;
            int x=-99999999;
            
            //cout<<"a 00000"<<endl;
            if (root == NULL) {
                return x;
            }
            else {
                
                tempNode = root;
                parentNode=NULL;
                while (tempNode!= NULL) {
                    
                    
                    //cout<<"pData tempNode parentNode: "<<pData<<" "<<tempNode->data<<" "<<parentNode->data<<endl;
                    if (pData < tempNode->data) {
                        parentNode = tempNode;
                        tempNode = tempNode->left;
                        leftOrRight='L';
                    }
                    else if (pData > tempNode->data) {
                        parentNode = tempNode;
                        tempNode = tempNode->right;
                        leftOrRight='R';
                    }
                    else {
                        //data found in tempNode
                        found=true;
                        break;
                    }
                }
                if (found) {
                    // match found then get the left if exists or right
                    //cout<<"0000000 pNode data: "<<pNode->data<<endl;
                    if (tempNode->right!=NULL) {
                        //x=pNode->right->data;
                        tempNode = tempNode->right;
                        // find next smallest, left most node to the right of the required number
                        while (tempNode->left != NULL) {
                            tempNode=tempNode->left;
                        }
                        x=tempNode->data;
                    }
                    else
                        if (parentNode != NULL && leftOrRight=='L')
                            x=parentNode->data;
                        else
                            x=-99999999;
                }
                
            }      
            return x;
        }   
            
 
        int findPrevIter(int pData) {
            Node *tempNode, *parentNode;
            char leftOrRight;
            bool found=false;
            int x=-99999999;
            
            //cout<<"a 00000"<<endl;
            if (root == NULL) {
                return x;
            }
            else {
                
                tempNode = root;
                parentNode=NULL;
                while (tempNode!= NULL) {
                    
                    
                    //cout<<"pData tempNode parentNode: "<<pData<<" "<<tempNode->data<<" "<<parentNode->data<<endl;
                    if (pData < tempNode->data) {
                        parentNode = tempNode;
                        tempNode = tempNode->left;
                        leftOrRight='L';
                    }
                    else if (pData > tempNode->data) {
                        parentNode = tempNode;
                        tempNode = tempNode->right;
                        leftOrRight='R';
                    }
                    else {
                        //data found in tempNode
                        found=true;
                        break;
                    }
                }
                if (found) {
                    // match found then get the left if exists or right
                    //cout<<"0000000 pNode data: "<<pNode->data<<endl;
                    if (tempNode->left!=NULL) {
                        //x=pNode->right->data;
                        tempNode = tempNode->left;
                        // find next smallest, left most node to the right of the required number
                        while (tempNode->right != NULL) {
                            tempNode=tempNode->right;
                        }
                        x=tempNode->data;
                    }
                    else
                        if (parentNode != NULL && leftOrRight=='R')
                            x=parentNode->data;
                        else
                            x=-99999999;
                }
                
            }      
            return x;
        } 
        int findMinIter() {
            //cout<<"a 00000"<<endl;
            Node * tempNode=root;
            Node * parentNode=NULL;
            
            while (tempNode!=NULL) {
                parentNode = tempNode;
                tempNode=tempNode->left;
            }
            return parentNode->data;
                        
        }    
        int findMaxIter() {
            Node * tempNode=root;
            Node * parentNode=NULL;
            
            while (tempNode!=NULL) {
                parentNode = tempNode;
                tempNode=tempNode->right;
            }
            return parentNode->data;
        }    

        
};

class AVLIterativeTree {
    public: Node *root;
    int bal=0;

    public:
        void printTree( Node *pNode) {

            //int i;
            if(pNode==NULL) {
                return;
            }
            //cout<<pNode->data<<" ";
            printTree(pNode->left);
            cout<<pNode->data<<" ";
            printTree(pNode->right);
           
        }
        // Calculates height of the node
        int getHeight(struct Node*p)
        {
            int i,j;
            if(!p)
                return 0;
            else
            {
                i=getHeight(p->left);
                j=getHeight(p->right);
                if(i>j)
                    return i+1;
                else
                    return j+1;
                }
        }
        // It gives balance factor of node
        int getBalanceFactor(struct Node *p)
        {
            return getHeight(p->left)-getHeight(p->right);
        }

        // It gives node which has imbalance
        Node* getImbalancedNode(Node* p)
        {
         
            //bal=&balance;
            while(p)
            {
                bal=getBalanceFactor(p);
                //cout<<endl<<"Imbalance factor of "<<p->data<<" is: "<<bal<<endl;
                if(bal>1||bal<-1)
                {
                    return p;
                }
                else
                    p=p->parent;
            }
            return p;
        }
        //Right rotation
        void rightRotate(struct Node *y)
        {
            struct Node *x = y->left,*Temp;
            
            Temp = x->right;
            if(y==root)
                root=x;
            else
            {
                if(y->parent->left==y)
                    y->parent->left=x;
                else
                    y->parent->right=x;
            }
            
            // Perform rotation
            x->parent = y->parent;
            y->parent = x;
            x->right = y;
            y->left = Temp;
            if(Temp!=NULL)
                Temp->parent = x;
        }
        
        // Left Rotation
        void leftRotate(struct Node *x)
        {
            struct Node *y = x->right,*temp;
            
            temp = y->left;
            // Perform rotation
            if(x==root)
            {
                root=y;
            }
            else
            {
                if(x->parent->left==x)
                    x->parent->left=y;
                else
                    x->parent->right=y;
            }
            y->parent=x->parent;
            x->parent=y;
            y->left = x;
            x->right = temp;
            if(temp!=NULL)
                temp->parent=x;
            else
                return;
        }

        void balanceNodes(struct Node*p,int key)
        {
            //right rotate
            //cout<<"bal key data: "<<bal<<" "<<key<<" "<<p->data<<endl;
            if(bal>1 && key < p->left->data)
            {
                //printf("\n\tRight rotation get performed on unbalanced node %d",p->data);
                rightRotate(p);
            }
            else
            //left rotate
                if(bal<-1 && key > p->right->data)
                {
                    //printf("\n\tLeft rotation get performed on unbalanced node %d",p->data);
                    leftRotate(p);
                }
                else
                    //left right
                    if(bal>1 && key > p->left->data)
                    {
                        //printf("\n\tLeft Right rotation get performed on unbalanced node %d",p->data);
                        leftRotate(p->left);
                        rightRotate(p);
                    }
                    else
                        //right left
                        if(bal<-1 && key < p->right->data)
                        {
                            //printf("\n\tRight Left rotation get performed on unbalanced node %d",p->data);
                            rightRotate(p->right);
                            leftRotate(p);
                        }
        }

        void insertIter(int pData) {
            
            //cout<<"a 00000"<<endl;
            Node *tempNode, *parentNode;
            char leftOrRight;
            
	        Node *newNode=new Node;
	        newNode->data=pData;

            // **************************************************************
            // First insert into the BST
            // **************************************************************
            if (root== NULL) {
                //root node

                root=newNode;
            }
            else {
                //not root node, find position to insert
                tempNode = root;

                while (tempNode!= NULL) {
                    parentNode = tempNode;

                    //cout<<"pData tempNode parentNode: "<<pData<<" "<<tempNode->data<<" "<<parentNode->data<<endl;
                    if (pData < tempNode->data) {

                        tempNode = tempNode->left;
                        leftOrRight='L';
                    }
                    else if (pData > tempNode->data) {

                        tempNode = tempNode->right;
                        leftOrRight='R';
                    }
                    else
                        return;

                    //newNode->oldHeight = 1 + max(height(newNode->left), height(newNode->right));  

                }
                //cout<<"********* out of loop: LR: "<<leftOrRight<<endl;
                if (leftOrRight=='L')
                    parentNode->left = newNode;
                else                
                    parentNode->right = newNode;

                
                newNode->parent=parentNode;


            }
            
            Node * q=getImbalancedNode(newNode); //Identify imbalanced node
            if(q!=NULL)
                balanceNodes(q,pData);// Balance imbalanced Node
            else
                return;

        }
        

        
        void deleteIter(int pData) {
            Node *tempNode, *parentNode;
            char leftOrRight;
            bool found=false;
            
            //cout<<"a 00000"<<endl;
            if (root == NULL) {
                return;
            }
            else {
                
                
                tempNode = root;
                parentNode=NULL;
                while (tempNode!= NULL) {
                    
                    
                    //cout<<"pData tempNode parentNode: "<<pData<<" "<<tempNode->data<<" "<<parentNode->data<<endl;
                    if (pData < tempNode->data) {
                        parentNode = tempNode;
                        tempNode = tempNode->left;
                        leftOrRight='L';
                    }
                    else if (pData > tempNode->data) {
                        parentNode = tempNode;
                        tempNode = tempNode->right;
                        leftOrRight='R';
                    }
                    else {
                        //data found in tempNode
                        found=true;
                        break;
                    }
                }
                if (found) {
                    //handle 3 scenarios
                    //1 - node has only left
                        //just remove the node
                    if (tempNode->left == NULL) {
                        if (leftOrRight == 'L')
                            parentNode->left = tempNode->right;
                        if (leftOrRight == 'R')
                            parentNode->right = tempNode->right;
                        free(tempNode);
                        //return;
                    }
                    //2 - node has only right
                    else if (tempNode->right == NULL) {
                        if (leftOrRight == 'L')
                            parentNode->left = tempNode->left;
                        if (leftOrRight == 'R')
                            parentNode->right = tempNode->left;
                        free(tempNode);
                        //return;
                    }
                    else {
                        //3 - node has both left and right
                            //find min node to the right of the node
                            //copy the min node to the node to be deleted
                            //delete the min node
                        Node* current = tempNode->right; 
                        Node* currentsParent = tempNode; 
                    
                        /* loop down to find the leftmost leaf */
                        while (current && current->left != NULL) { 
                            currentsParent = current;
                            current = current->left;
                        
                        }
                        //cout<<endl<<"pNode's rights left: "<<current->data<<endl;
                        //cout<<"pNode's rights left parent: "<<currentsParent->data<<endl;
                        currentsParent->right = current->right; 
                        tempNode->data = current->data;
    
                        free(current);
                        //return;
                    }
                    Node * q=getImbalancedNode(tempNode); //Identify imbalanced node
                    if(q!=NULL)
                        balanceNodes(q,pData);// Balance imbalanced Node

                    return;
                }
            }
           
        }

        int findNextIter(int pData) {
            Node *tempNode, *parentNode;
            char leftOrRight;
            bool found=false;
            int x=-99999999;
            
            //cout<<"a 00000"<<endl;
            if (root == NULL) {
                return x;
            }
            else {
                
                tempNode = root;
                parentNode=NULL;
                while (tempNode!= NULL) {
                    
                    
                    //cout<<"pData tempNode parentNode: "<<pData<<" "<<tempNode->data<<" "<<parentNode->data<<endl;
                    if (pData < tempNode->data) {
                        parentNode = tempNode;
                        tempNode = tempNode->left;
                        leftOrRight='L';
                    }
                    else if (pData > tempNode->data) {
                        parentNode = tempNode;
                        tempNode = tempNode->right;
                        leftOrRight='R';
                    }
                    else {
                        //data found in tempNode
                        found=true;
                        break;
                    }
                }
                if (found) {
                    // match found then get the left if exists or right
                    //cout<<"0000000 pNode data: "<<pNode->data<<endl;
                    if (tempNode->right!=NULL) {
                        //x=pNode->right->data;
                        tempNode = tempNode->right;
                        // find next smallest, left most node to the right of the required number
                        while (tempNode->left != NULL) {
                            tempNode=tempNode->left;
                        }
                        x=tempNode->data;
                    }
                    else
                        if (parentNode != NULL && leftOrRight=='L')
                            x=parentNode->data;
                        else
                            x=-99999999;
                }
                
            }      
            return x;
        }   
            
 
        int findPrevIter(int pData) {
            Node *tempNode, *parentNode;
            char leftOrRight;
            bool found=false;
            int x=-99999999;
            
            //cout<<"a 00000"<<endl;
            if (root == NULL) {
                return x;
            }
            else {
                
                tempNode = root;
                parentNode=NULL;
                while (tempNode!= NULL) {
                    
                    
                    //cout<<"pData tempNode parentNode: "<<pData<<" "<<tempNode->data<<" "<<parentNode->data<<endl;
                    if (pData < tempNode->data) {
                        parentNode = tempNode;
                        tempNode = tempNode->left;
                        leftOrRight='L';
                    }
                    else if (pData > tempNode->data) {
                        parentNode = tempNode;
                        tempNode = tempNode->right;
                        leftOrRight='R';
                    }
                    else {
                        //data found in tempNode
                        found=true;
                        break;
                    }
                }
                if (found) {
                    // match found then get the left if exists or right
                    //cout<<"0000000 pNode data: "<<pNode->data<<endl;
                    if (tempNode->left!=NULL) {
                        //x=pNode->right->data;
                        tempNode = tempNode->left;
                        // find next smallest, left most node to the right of the required number
                        while (tempNode->right != NULL) {
                            tempNode=tempNode->right;
                        }
                        x=tempNode->data;
                    }
                    else
                        if (parentNode != NULL && leftOrRight=='R')
                            x=parentNode->data;
                        else
                            x=-99999999;
                }
                
            }      
            return x;
        } 
        int findMinIter() {
            //cout<<"a 00000"<<endl;
            Node * tempNode=root;
            Node * parentNode=NULL;
            
            while (tempNode!=NULL) {
                parentNode = tempNode;
                tempNode=tempNode->left;
            }
            return parentNode->data;
                        
        }    
        int findMaxIter() {
            Node * tempNode=root;
            Node * parentNode=NULL;
            
            while (tempNode!=NULL) {
                parentNode = tempNode;
                tempNode=tempNode->right;
            }
            return parentNode->data;
        }    

};

int* getRandomArray(int n) {
    //int * pointer;
    int* arrayList = new int [n];
    int x;
    for (int j=0; j<n; j++) {
        //cout<<x<<" ";
        arrayList[j]=0;
        
        x=rand();// % 1000 + 1;
        
        if (j==0 ) {
            arrayList[0]=x;
        }
        else {
            // check if random number already exists in the array
            // if exists re-create random number and check if it exists in the array
            int i=0;
            //cout<<"array size: "<<sizeof(arrayList)/sizeof(arrayList[0])<<endl;
            while (i< n) {
                if (arrayList[i] == x ) {
                    x=rand();// % 1000 + 1;
                    //cout<<"dup found"<<endl;
                    i=0;
                }
                else
                {
                    i++;
                }
                //cout<<"j i x:"<<j<<" "<<i-1<<" "<<x<<endl;
            }
            arrayList[j]=x;
        }
    }
    //pointer = arrayList;
    //cout<<"inside function: "<<endl;
    //for (int i=0; i<n; i++) {
        
        //cout<<arrayList[i]<<" ";
    //}
    return arrayList;
}


int main() {
    int x;
    BSTIterative mytree;
    mytree.root=NULL;
    
    AVLIterativeTree myAVLtree;
    myAVLtree.root=NULL;

    //problem 5b
    //create random Array of size 10000
    
    int n=10000;
    int* arrayList = getRandomArray(n);
    for (int i=0; i<n; i++) {
        
        mytree.insertIter(arrayList[i]);
        myAVLtree.insertIter(arrayList[i]);
    }
    cout<<"BST Tree: "<<endl;
    mytree.printTree(mytree.root);
    
    cout<<endl<<"AVL Tree: "<<endl;
    myAVLtree.printTree(mytree.root); 
    

}